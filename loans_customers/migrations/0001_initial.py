# Generated by Django 5.2.6 on 2025-09-16 11:49

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0002_company_address_company_base_currency_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_id', models.CharField(editable=False, max_length=20)),
                ('customer_type', models.CharField(choices=[('individual', 'Individual'), ('business', 'Business/Corporate')], default='individual', max_length=20)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50)),
                ('date_of_birth', models.DateField(blank=True, help_text='Required for individuals', null=True)),
                ('national_id', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='National ID must contain only numbers, letters, and dashes', regex='^[0-9A-Z\\-]+$')])),
                ('email', models.EmailField(max_length=254)),
                ('phone_primary', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number', regex='^\\+?[\\d\\s\\-\\(\\)]+$')])),
                ('phone_secondary', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number', regex='^\\+?[\\d\\s\\-\\(\\)]+$')])),
                ('street_address', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='United States', max_length=100)),
                ('employment_type', models.CharField(blank=True, choices=[('full_time', 'Full Time Employee'), ('part_time', 'Part Time Employee'), ('self_employed', 'Self Employed'), ('business_owner', 'Business Owner'), ('retired', 'Retired'), ('unemployed', 'Unemployed'), ('student', 'Student')], max_length=20)),
                ('employer_name', models.CharField(blank=True, max_length=200)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                ('employment_duration_months', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, help_text='Gross monthly income', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('other_income', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Other monthly income sources', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed'), ('separated', 'Separated')], max_length=20)),
                ('dependents_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('business_name', models.CharField(blank=True, max_length=200)),
                ('business_registration_number', models.CharField(blank=True, max_length=50)),
                ('business_type', models.CharField(blank=True, max_length=100)),
                ('years_in_business', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('annual_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('monthly_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('existing_debt_payments', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monthly payments on existing debts', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('credit_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MinValueValidator(850)])),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('account_number', models.CharField(blank=True, max_length=50)),
                ('routing_number', models.CharField(blank=True, max_length=20)),
                ('account_type', models.CharField(blank=True, choices=[('checking', 'Checking'), ('savings', 'Savings')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('risk_rating', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('unrated', 'Not Rated')], default='unrated', max_length=20)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number', regex='^\\+?[\\d\\s\\-\\(\\)]+$')])),
                ('company', models.ForeignKey(help_text='Company this record belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_set', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['company', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('id_document', 'ID Document'), ('proof_of_income', 'Proof of Income'), ('bank_statement', 'Bank Statement'), ('employment_letter', 'Employment Letter'), ('tax_return', 'Tax Return'), ('business_license', 'Business License'), ('financial_statement', 'Financial Statement'), ('collateral_document', 'Collateral Document'), ('other', 'Other')], max_length=30)),
                ('document_name', models.CharField(max_length=200)),
                ('file_path', models.FileField(upload_to='customer_documents/%Y/%m/')),
                ('file_size', models.IntegerField(help_text='File size in bytes')),
                ('description', models.TextField(blank=True)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('document_number', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('company', models.ForeignKey(help_text='Company this record belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_set', to='company.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='loans_customers.customer')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_customer_documents', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['company', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'customer_id'], name='loans_custo_company_ee7be9_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'email'], name='loans_custo_company_592070_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'national_id'], name='loans_custo_company_b2ebc8_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'last_name', 'first_name'], name='loans_custo_company_8feb65_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'customer_type', 'is_active'], name='loans_custo_company_e8b74e_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'risk_rating'], name='loans_custo_company_40f6a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('company', 'customer_id'), ('company', 'email'), ('company', 'national_id')},
        ),
        migrations.AddIndex(
            model_name='customerdocument',
            index=models.Index(fields=['company', 'customer', 'document_type'], name='loans_custo_company_b7b336_idx'),
        ),
        migrations.AddIndex(
            model_name='customerdocument',
            index=models.Index(fields=['company', 'status'], name='loans_custo_company_e7825d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerdocument',
            index=models.Index(fields=['company', 'expiry_date'], name='loans_custo_company_3c360d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerdocument',
            index=models.Index(fields=['company', 'document_type'], name='loans_custo_company_9209ac_idx'),
        ),
    ]

"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-k&+yat-s^2qaercj6$q+@p^hcwkd8-mldwy_wu1bbim%0(tl38"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
    if os.getenv("ALLOWED_HOSTS")
    else ["localhost", "127.0.0.1", "testserver"]
)


# Login/Logout URLs
LOGIN_URL = "/users/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",  # For humanize template tags
    # Custom apps
    "core",
    "users",
    "company",  # Multi-company management
    "setup",  # Modular setup system
    "api",
    "coa",
    "bank_accounts",
    "reconciliation",
    "journal",
    "assets",  # Fixed Assets management
    "reports",  # New modular reports app
    "conversion",  # Conversion balances (opening balances)
    # Loan Management System
    "loans_core",  # Foundation - loan products and applications
    "loans_customers",  # Customer management and KYC
    "loans_collateral",  # Collateral management and valuations
    "loans_schedule",  # Payment scheduling and interest calculations
    "loans_payments",  # Payment processing and accounting integration
    "loan_reconciliation_bridge",  # Bridge between loan system and reconciliation
    "loan_report",  # Advanced loan reporting and analytics module
    # Phase 3 Advanced Features - Ready for Celery when available
    # "django_celery_beat",  # Uncomment when Celery is properly installed
]

# Add debug toolbar only in development
if DEBUG:
    INSTALLED_APPS += ["debug_toolbar"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware for setup flow management - DISABLED
    # "setup.middleware.SetupFlowMiddleware",
    # "setup.middleware.SetupCompletionMiddleware",
]

# Add debug toolbar and template error detection middleware only in development
if DEBUG:
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    MIDDLEWARE += [
        "core.template_error_middleware.SilentTemplateErrorDetectionMiddleware"
    ]

ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.company_context",
            ],
            "debug": DEBUG,  # Use DEBUG setting for template debugging
            "string_if_invalid": "**MISSING_%s**",  # Shows missing variables clearly
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL Configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "django_loan_system"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),  # Set in .env file
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
        "OPTIONS": {
            "client_encoding": "UTF8",
        },
    }
}

# SQLite backup configuration (for fallback during development)
if os.getenv("USE_SQLITE", "False").lower() == "true":
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }


# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'loan-management-cache',
    }
}

# Redis Configuration for Advanced Caching (Phase 3 Performance)
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_CACHE_DB = int(os.getenv('REDIS_CACHE_DB', 1))

# Try to configure Redis cache if available
REDIS_AVAILABLE = False

# For now, always use local memory cache (Redis optional)
print("üì¶ Using local memory cache (Redis integration ready but not required)")

# Celery Configuration (Phase 3 Background Processing)  
# Use database broker as fallback when Redis not available
CELERY_BROKER_URL = 'django://'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'

print("‚öôÔ∏è  Celery configured with database broker")

# Celery Database Fallback
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_RETRY = True

# Celery Task Configuration
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Celery Beat (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task time limits
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes

# Worker settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Background Processing Configuration
ENABLE_BACKGROUND_PROCESSING = os.getenv('ENABLE_BACKGROUND_PROCESSING', 'True').lower() == 'true'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Additional locations of static files during development
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (uploaded files)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Debug Toolbar Configuration (Development Only)
if DEBUG:
    # Debug toolbar settings
    INTERNAL_IPS = ["127.0.0.1", "localhost"]

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TEMPLATE_CONTEXT": True,  # Shows template variables
        "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,
        "RENDER_PANELS": True,  # Show template rendering details
    }

# Enhanced Admin Configuration for Development
if DEBUG:
    # Better admin interface
    ADMIN_SITE_HEADER = "üè¢ Multi-Company Accounting System - Development"
    ADMIN_SITE_TITLE = "Accounting Admin"
    ADMIN_INDEX_TITLE = "Database Management & Structure Viewer"

    # Enhanced admin performance
    DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240  # Handle large forms
    ADMIN_PAGINATOR_PAGE_SIZE = 50  # Limit admin list views for performance

    # Show SQL queries in debug mode
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
            },
            "file": {
                "class": "logging.FileHandler",
                "filename": BASE_DIR / "debug_admin.log",
            },
        },
        "loggers": {
            "django.db.backends": {
                "handlers": ["console", "file"],
                "level": "INFO",  # Show SQL queries
                "propagate": False,
            },
            "django.request": {
                "handlers": ["console", "file"],
                "level": "ERROR",
                "propagate": True,
            },
        },
    }

# CSRF Settings - Ensure CSRF tokens are available for AJAX requests
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token
CSRF_COOKIE_SECURE = False    # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False     # Use cookies instead of sessions
CSRF_COOKIE_AGE = 31449600    # 1 year
